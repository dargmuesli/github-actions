name: Docker

on:
  workflow_call:
    secrets:
      DOCKER_HUB_ACCESS_TOKEN:
        required: true
      DOCKER_HUB_USER_NAME:
        required: true

jobs:
  docker:
    name: Docker
    runs-on: ubuntu-latest
    steps:
      - name: Git checkout
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3.0.2
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref }}

      - name: Docker Buildx setup
        id: buildx
        uses: docker/setup-buildx-action@f211e3e9ded2d9377c8cadc4489a4e38014bc4c9 # tag=v1.7.0

      - name: Registry login
        if: github.event_name != 'pull_request'
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USER_NAME }}" --password-stdin

      - name: Build
        run: |
          # Strip git ref prefix from version
          IMAGE_ID=${{ github.repository }}
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # Push the Docker image to the registry on git pushes that either pushed a tag or one of the following branches: [master, develop]
          if [[
            (
              "${{ github.event_name }}" == "release"
              &&
              "${{ startsWith(github.ref, 'refs/tags/') }}" == "true"
            )
            ||
            (
              "${{ github.event_name }}" == "push"
              &&
              "${{ startsWith(github.ref, 'refs/heads/') }}" == "true"
              &&
              (
                $VERSION == "latest"
                ||
                $VERSION == "develop"
              )
            )
          ]]
          then
            docker buildx build \
              --build-arg CI=true \
              --cache-from=$IMAGE_ID:cache \
              --cache-to=$IMAGE_ID:cache \
              --push \
              -t $IMAGE_ID:$VERSION \
              .
          else
            docker buildx build \
              --build-arg CI=true \
              --cache-from=$IMAGE_ID:cache \
              -t $IMAGE_ID:$VERSION \
              .
          fi

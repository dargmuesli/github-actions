name: Docker

on:
  workflow_call:
    inputs:
      ARCHITECTURES:
        default: linux/amd64
        required: false
        type: string
      IMAGE_ID:
        required: false
        type: string
    secrets:
      DOCKER_HUB_ACCESS_TOKEN:
        required: true
      DOCKER_HUB_USER_NAME:
        required: true

jobs:
  docker:
    name: Docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout git repository
        uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c # v3.3.0
        with:
          fetch-depth: 0

      - name: Docker Buildx setup
        id: buildx
        uses: docker/setup-buildx-action@5e716dcfd653738c2d1db099bfba194a84158be4 # v2.3.0

      - name: Registry login
        if: github.event_name != 'pull_request'
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USER_NAME }}" --password-stdin

      - name: Build
        run: |
          # Strip git ref prefix from version
          IMAGE_ID=${{ inputs.IMAGE_ID || github.repository }}
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          # Push the Docker image to the registry on git pushes that either pushed a tag or one of the following branches: [master, develop]
          if [[
            (
              "${{ github.event_name }}" == "release"
              &&
              "${{ startsWith(github.ref, 'refs/tags/') }}" == "true"
            )
            ||
            (
              "${{ github.event_name }}" == "push"
              &&
              "${{ startsWith(github.ref, 'refs/heads/') }}" == "true"
              &&
              (
                $VERSION == "latest"
                ||
                $VERSION == "develop"
              )
            )
          ]]
          then
            docker buildx build \
              --build-arg CI=true \
              --cache-from=$IMAGE_ID:cache \
              --cache-to=$IMAGE_ID:cache \
              --platform=${{ inputs.ARCHITECTURES }} \
              --push \
              -t $IMAGE_ID:$VERSION \
              .
          else
            docker buildx build \
              --build-arg CI=true \
              --cache-from=$IMAGE_ID:cache \
              -t $IMAGE_ID:$VERSION \
              .
          fi
